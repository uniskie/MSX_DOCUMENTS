> ----------------------------------------------------------------
> 注意：
>   このドキュメントはMSXディスク通信創刊号(1990年10月)
>   付属のMuSICA v1.00向けの物が
>   実際のBGM.BINとは仕様が異なっているため、
>   オリジナルの仕様書の情報だと演奏制御は出来ません。
> 
>   このドキュメントは
>   自分で解析した情報を元に実際に使えるように修正した非公式版です。
>
>   実際にリリースされたBGM.BINはBASICからの呼び出しに対応し、
>   一部エントリが廃止され、ワークエリアも大きく移動しています。
>
> ----------------------------------------------------------------

MSXマガジン標準ミュージックドライバー

[MuSICA]

-ドライバー部 プログラム 仕様書 (改) -

(1)ミュージックドライバーのエントリーについて説明します。

[ ]内はそのアドレスです。

・BGMINI [CE00H]

  ミュージックドライバーを初期化します。

  このルーチンを実行するまでは、以後のすべてのミュージックドライバーのエントリールーチンを呼び出してはいけません。

  また、このルーチン実行後、ページ1のスロットを変更してはいけません。変更する必要が発生した場合は、いったん演奏を中断し、割り込み処理ルーチンからNGMDRVを切り離したあとスロットを変更し、再度このルーチンを呼び出してください。

    エントリー : なし
    リターン   : なし
    レジスタ   : すべて

・BGMON [CE03H]

  演奏を開始します。

  ----------------------------------------------------------------
  実装と異なる部分
  ----------------------------------------------------------------
  > あらかじめBGMDRVを割り込み処理ルーチンに接続しておいてください。
  > 割り込み制御はしていません。必要に応じてDIおよびEIを行ってください。
  >   エントリー : HL=音楽データヘッダー部の先頭アドレス
  >                 A=繰り返し回数 0～255
  >                                (0のとき無限ループ)
  >   リターン   : なし
  >   レジスタ   : すべて
  ----------------------------------------------------------------

  1. 割り込み制御は内部で自動で行います。
  2. 入力がBASICのUSR関数引数を前提とした処理に変更されています。

  ----------------------------------------------------------------
  変更点1 : 割り込み制御
  ----------------------------------------------------------------

  内部でタイマー割り込みを書き換えます。
  その際、DI/EIで割り込みを制御しています。
  フック処理後は割り込み許可状態でBGM演奏初期化処理を行い、
  そのまま割り込み許可状態で帰ります。
  
  ※ 割り込み禁止が必要な状態での呼び出しは避けてください。

  ----------------------------------------------------------------
  変更点2 : 入力パラメータ
  ----------------------------------------------------------------

  BASICのUSR関数からの呼び出し向けに変更されています。
  そのため、機械語での扱いが少し面倒になっています。

  BASICから扱う場合 :
   （変数は整数型であること）

    DEFUSR=&HCE03:U=USR(VARPTR(P(0)))
    エントリー : =P(1)=音楽データヘッダー部の先頭アドレス
                  P(0)=繰り返し回数 0～255
                       (0のとき無限ループ)
    リターン   : なし

    利用例 :

      BGM.BGM は
      MuSICA の Disk menu → 5.save BGM → Start address=A600
      で保存したもの

      ```
      100 CLEAR 200,&HA000:DEFINT A-Z  '変数は整数とする
      110 BLOAD"BGM.BIN"               'ドライバロード
      120 DEFUSR=&HCE00:U=USR(0)       'BGMINI:ドライバ初期化
      130 BLOAD"BGM.BGM"               'BGMデータロード
      140 P(0)=0                       'P(0) = ループ回数 0=無限ループ
      150 P(1)=&HA600                  'P(1) = BGMデータアドレス=&HA600
      190 DEFUSR1=&HCE03:U=USR1(VARPTR(P(0))) 'BGMON:演奏開始
      200 I$=INPUT$(1)
      210 DEFUSR2=&HCE06:U=USR2(0)     'BGMOFF:演奏終了
      ```

      配列変数を使用しない場合は

      ```
      100 CLEAR 200,&HA000:DEFINT A-Z  '変数は整数とする
      110 BLOAD"BGM.BIN"               'ドライバロード
      120 DEFUSR=&HCE00:U=USR(0)       'BGMINI:ドライバ初期化
      130 BLOAD"BGM.BGM"               'BGMデータロード
      140 BA=&HA600                    'BA = BGMデータアドレス=&HA600
      150 PA=&HA000                    'PA = パラメータワークアドレス
      160 POKE PA,0                    'ループ回数 0=無限ループ
      170 POKE PA+2,PEEK(VARPTR(BA)+0) 'BGMアドレス(下位8ビット)
      180 POKE PA+3,PEEK(VARPTR(BA)+1) 'BGMアドレス(上位8ビット)
      190 DEFUSR1=&HCE03:U=USR1(PA)    'BGMON:演奏開始
      200 I$=INPUT$(1)
      210 DEFUSR2=&HCE06:U=USR2(0)     'BGMOFF:演奏終了
      ```
      など。


  機械語から扱う場合 : 

    エントリー : HL=F7F6H(ワークエリア:DAC)
                 [F7F6H+2,2]=F7FAH (パラメータワークにF6F7H+4を利用)
                 [F6FAH+2,2]=音楽データヘッダー部の先頭アドレス
                 [F7FAH+0,1]=繰り返し回数 0～255
                                         (0のとき無限ループ)
    リターン   : なし
    レジスタ   : すべて

  補足 : [CE15H]を呼び出せばUSR関数向けの処理を飛ばして、HL,Aで指定できます。
         バージョンアップが無いと思うので、機械語からはこちらの方が楽です。

    エントリー : HL=音楽データヘッダー部の先頭アドレス
                  A=繰り返し回数 0～255
                                 (0のとき無限ループ)
    リターン   : なし
    レジスタ   : すべて


  ----------------------------------------------------------------
  解説 : エントリ呼び出し～USR引数処理
  ----------------------------------------------------------------

  1. BASIC USR関数で呼び出した場合、HLにはDACアドレスF7F6Hが入っている。
  2. 整数型の場合、DAC+2に引数の値が入っている。

  「USR引数を受け取る処理」は以下の通り。
  ```
  ce03:  jp $ce12
  ...
  ce12:  call $ce1e     ; USR引数からパラメータを受け取る処理
  ce15:  jp $ce34       ; BGMON処理の本体
  ...
  ce1e:  ; USR引数からパラメータを受け取る処理
          push hl
          pop  ix
          ld   l,(ix+2)
          ld   h,(ix+3) ; hl=USR引数
          push hl
          pop  ix
          ld   a,(ix+0) ;  a=peek(USR引数+0)
          ld   l,(ix+2) ; hl=peek(USR引数+2)+peek(USR引数+3)*256
          ld   h,(ix+3)
  ```

・BGMOFF [CE06H]

  演奏を終了します。割り込み制御はしていません。

    エントリー : なし
    リターン   : なし
    レジスタ   : すべて

・-BGMDRV [CE09H]- → 廃止

  ----------------------------------------------------------------
  実装と異なる部分
  ----------------------------------------------------------------
  > 60分の1のタイマー割り込みを使用して音楽の演奏を行います。
  > ユーザーの割り込み処理ルーチンから呼び出してください。

  廃止されています。
  ----------------------------------------------------------------

  実体はCE62Hにありますが、
  BGMONを呼び出した時に自動的にタイマーフックから呼び出すように設定されますので、
  自分で呼び出す必要はありません。

・-BGMTST [CE0CH]- → 廃止

  ----------------------------------------------------------------
  実装と異なる部分
  ----------------------------------------------------------------
  > BGMONにより開始した音楽が演奏中かどうかを調べます。割り込み制御はしていません。
  > 
  >   エントリー : なし
  >   リターン   : Zフラグが立っていれば終了している
  >   レジスタ   : AF

  廃止されています。
  ----------------------------------------------------------------

  直接ワークエリア「DRV.ON」を調べれば判定可能です。

・BGMVOL [CE0FH] → [CE09]

  マスターボリュームの書き込み、読み出し、演奏の一時中断、演奏の再開を制御します。
  マスターボリュームは0から15の16段階で指定でき、0のとき最大となります。
  特に必要のない場合は常に0で演奏するように心がけてください。
  割り込み制御はしていません。

  ----------------------------------------------------------------
  実装と異なる部分
  ----------------------------------------------------------------
  1. エントリアドレスが変更されています。
  2. 入力がBASICのUSR関数引数を前提とした処理に変更されています。
  ----------------------------------------------------------------

  BASICの場合 : 
   （変数は整数型であること）

    DEFUSR=&HCE09:U=USR(VARPTR(A))
    エントリー : A=0～15 マスターボリューム書き込み
                 A=16    マスターボリューム読み出し
                 A=17    演奏の一時中断
                 A=18    演奏の再開
    リターン   : 読みだした場合、Aレジスタにマスターボリューム値0～15が入るので
                 BASICからは取得できません。
                 仕方ないので、ワークエリアを直接読みだしてください。

    例)
    V=15 ' マスターボリューム=最低音量
    DEFUSR=&HCE09:U=USR(VARPTR(V))

  機械語の場合 : 

    エントリー : HL=F7F6H(ワークエリア:DAC)
                 [F7F6H+2,2]=F7F6H (パラメータワークにF6F7Hを利用)
                 [F7F6H,1]=0～15 マスターボリューム書き込み
                 [F7F6H,1]=16    マスターボリューム読み出し
                 [F7F6H,1]=17    演奏の一時中断
                 [F7F6H,1]=18    演奏の再開
    リターン   : 読みだした場合、Aにマスターボリューム値0～15が入る
    レジスタ   : すべて

  補足 ： [CE1BH]を呼び出せば、USR引数処理をスキップしてAレジスタで指定できます。
         バージョンアップが無いと思うので、機械語からはこちらの方が楽です。

    エントリー : A=0～15 マスターボリューム書き込み
                 A=16    マスターボリューム読み出し
                 A=17    演奏の一時中断
                 A=18    演奏の再開
    リターン   : 読みだした場合、Aにマスターボリューム値0～15が入る
    レジスタ   : すべて

・BGMSW [CE12H] → [CE0CH]
  
  PSGの音楽データを実際にレジスタに書き込むかどうかをチャンネルごとに設定します。
  ある特定のPSGチャンネルを効果音で使用するとき、 効果音の発生が終了するまで音楽演奏データをそのチャンネルのPSGレジスタに書き込まれては困る場合に使用します。
  割り込み制御はしていません。

  ----------------------------------------------------------------
  実装と異なる部分
  ----------------------------------------------------------------
  1. エントリアドレスが変更されています。
  2. 入力がBASICのUSR関数引数を前提とした処理に変更されています。
  ----------------------------------------------------------------

  ----------------------------------------------------------------
  補足：
  1. 元ドキュメントにはありませんが、曲がループするとマスクが勝手にクリアされます。
     毎フレーム呼び出すと良いのですが、ここで補足2の問題がでます。

  2. BGMSWでは瞬間的にPSGミキサーを全ミュート→再設定を行うので
     連続して呼び出していると発音に僅かに影響が出ます。
  ----------------------------------------------------------------

  BASICの場合 : 
   （変数は整数型であること）

    DEFUSR=&HCE0C:U=USR(VARPTR(A))
    エントリー : A=&B00000XXX
                          ||+- bit0=PSG チャンネルA
                          |+-- bit1=PSG チャンネルB
                          +--- bit2=PSG チャンネルC
                 対応するビットが0のときオン、1のときオフとなります。
                 上位5ビットは必ず0を設定してください。
    リターン   : なし
    レジスタ   : すべて

    例)
    M=&B111 ' PSG全チャンネルOFF
    DEFUSR=&HCE0C:U=USR(VARPTR(M))

  機械語の場合 : 

    エントリー : HL=F7F6H(ワークエリア:DAC)
                 [F7F6H+2,2]=F7F6H (パラメータワークにF6F7Hを利用)
                 [F7F6H,1]=00000PPP
                 bit0=PSG チャンネルA
                 bit1=PSG チャンネルB
                 bit2=PSG チャンネルC
                 対応するビットが0のときオン、1のときオフとなります。
                 上位5ビットは必ず0を設定してください。

  補足 : [CE0FH]を呼び出せば、USR引数処理をスキップしてAレジスタで指定できます。
         バージョンアップが無いと思うので、機械語からはこちらの方が楽です。

    エントリー : A=00000PPP
                 bit0=PSG チャンネルA
                 bit1=PSG チャンネルB
                 bit2=PSG チャンネルC
                 対応するビットが0のときオン、1のときオフとなります。
                 上位5ビットは必ず0を設定してください。
    リターン   : なし
    レジスタ   : すべて

(2) ミュージックドライバーのワークエリアについて説明します。

[ ]内はそのアドレスとバイト数です。

  ワークエリアの読み出しは可能ですが、書き込んだ場合の動作の保証はありません。またミュージックドライバーの状態を知る必要はある場合は、直接ワークエリアを見ず、上記のエントリールーチンを使用することをおすすめします。

・FMSLOT [CE15H,1] → [CE97H,1]

  BGMINIを呼び出した時のMSX-MUSICのスロット番号が入ります。MSX-MUSICがない場合0となります。

・SCSLOT [CE16H,1] → [CE98H,1]

  BGMINIを呼び出した時のSCCカートリッジのスロット番号が入ります。SCCカートリッジがない場合0となります。

・P1SLOT [CE17H,1] → [CE99H,1]

  BGMINIを呼び出した時のページ1のメインRAMのスロット番号が入ります。

・MSTVOL [CE18H,1] → [CE9AH,1]

  マスターボリュームの値を示します。

・DRV.ON [CE19H,1] → [CE9BH,1]

  0なら演奏していない、1なら演奏中を示します。

・DATADD [CE1AH,2] → [CE9CH,2]

  現在演奏している音楽データのヘッダーデータ部の先頭番地を示します。

  ※ 演奏開始後にこのアドレスを書き換えると、
     イントロ→メインループのようなことが出来ます。

・PRTFLG [CE1CH,1] → [CE9EH,1]

  残りの演奏回数を示します。

(3) ミュージックドライバー使用上の注意事項

  BGMINIによりミュージックドライバーを初期化したあとは、ページ1のスロットを変更してはいけません。変更する必要が発生した場合、いったんドライバーを割り込み処理ルーチンより切り離し、スロットを変更後、再度BGMINIを呼び出してください。

  ----------------------------------------------------------------
  実装と異なる部分
  ----------------------------------------------------------------
  > BGMINIをのぞくすべてのエントリールーチンでは、割り込み制御命令(DI、EI)を実行していません。エントリールーチンを呼び出す前後で、必要に応じてDI、EIを行ってください。
  
  BGMINIとBGMONを除くすべてのエントリールーチンでは、割り込み制御命令(DI、EI)を実行していません。エントリールーチンを呼び出す前後で、必要に応じてDI、EIを行ってください。

  > (例)
  > 
  >       DI                                      ;割り込み禁止
  >       LD HL,システムフック保存場所の先頭番地  ;フック切り離し
  >       LD DE,0FD9FH
  >       LD BC,5
  >       LDIR
  >       LD A,演奏回数                           ;エントリー呼び出し
  >       LD HL,ミュージックデータ先頭番地
  >       CALL BGMON
  >       LD A,0C3H
  >       LD HL,ユーザー割り込みルーチン
  >       LD (0FD9FH+0),A
  >       LD (0FD9FH+1),HL
  >       EI                                      ;割り込み許可
  → このサンプルは廃止

  ※ BGMONの呼び出しではH.TIMIの操作はBGMON内部で行うので、外部で行わないでください。

     このため、BGMONでは演奏開始時にEIに変更されて帰ってきますので、割り込み禁止が必要な状態からは呼び出さないようにしてください。

----------------------------------------------------------------
非公式ワークエリア
----------------------------------------------------------------

・[CE67H,1]

  演奏のためにH.TIMIを書き換えていれば1、書き換えていなければ0

・[dcd1,1] bit2 - PSG ch.Aのマスク
・[dceb,1] bit2 - PSG ch.Bのマスク
・[dd05,1] bit2 - PSG ch.Aのマスク

・[dd99,1] bit0 - PSG ch.Aのトーンを演奏に使用している
           bit3 - PSG ch.Aのノイズを演奏に使用している
・[dda2,1] bit0 - PSG ch.Bのトーンを演奏に使用している
           bit3 - PSG ch.Bのノイズを演奏に使用している
・[ddab,1] bit0 - PSG ch.Cのトーンを演奏に使用している
           bit3 - PSG ch.Cのノイズを演奏に使用している

ループ検出（演奏済みループ回数など）の方法・ワークエリアは残念ながら見つかっていません。

----------------------------------------------------------------
おまけ情報：
----------------------------------------------------------------

SCCスロットを強制指定したい場合

プログラムを書き換えてSCC走査結果を固定する

A=SCCカートリッジのSLOT番号
POKE&HD053,&H3E:POKE&HD054,A:POKE&HD055,&H32:POKE&HD056,&H98:POKE&HD057,&HCE:POKE&HD058,0
